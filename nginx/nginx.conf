#
# File Name: nginx.conf
# Description: configure nginx within the docker container. Setup as a reverse proxy.
# Author: Jonathan Brier & Christopher Kullenberg
# Inspired by https://github.com/benoitc/gunicorn/blob/master/examples/nginx.conf
#

worker_processes 1;

user nobody nogroup;
# 'user nobody nobody;' for systems with 'nobody' as a group instead
error_log  /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
}

http {
### Configuring a way for more than one server hosting the app
  upstream django_server {
#    server 127.0.0.1:8000 fail_timeout=0; # TODO figure out how to properly network and route gunicorn to the nginx server for handling
    server djangoapp-app:8000 fail_timeout=0; # TODO figure out how to properly network and route gunicorn to the nginx server for handling


  ### for UNIX domain socket setups
  #server unix:/tmp/gunicorn.sock fail_timeout=0;
  }

#server {
#    ### if no Host match, close the connection to prevent host spoofing
#    listen 80 default_server;
#    listen 443;

#    return 444; # don't return response for anything, but the ports listed
#  }


### Specific configuration of Nginx for serving the docker based ArcsSystem app
  server {

    ### port opened to listen, set default
#    listen 80 deferred;
    listen 80 default_server;
    # listen 443 ssl; # TODO enable for tls support
    # ssl_certificate /etc/letsencrypt/live/medborgarforskning/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/medborgarforskning/privkey.pem;
    # include /etc/letsencrypt/options-ssl-nginx.conf; # enable for letsencrypt wildcard deployment # TODO implement letsencrypt wildcard

    server_name localhost arcs.local www.arcs.local *.arcs.local;
    charset utf-8;

    ### max upload size
    client_max_body_size 75M;   # adjust to taste

    ### set Nginx to handle the site design static files to offload from python app
    location /static/ { # scripts, images, etc for site design - working don't touch
      alias /var/www/arcs_project_code/static/;
    }

    ### set Nginx to handle the user uploaded static files to offload from python app
    location /media/ { # host static files from user side
      alias /var/www/arcs_project_code/media/;
    }

    location / {
      ### checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    }

    ### Reverse proxy the Django app requests
    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Host $server_name;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host $http_host;
      ### we don't want nginx trying to do something clever with
      ### redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass         http://django_server;
    }

    #error_log /etc/nginx/error_log.log;
    #access_log /etc/nginx/access_log.log;

    error_page 500 502 503 504 /500.html; # TODO create and add 500.html
    location = /500.html {
#      root /path/to/app/current/public; # TODO fix path
      root /var/www/arcs_project_code/static/;
    }
  }
}
