"""
Django settings for arcs_project project.

Generated by 'django-admin startproject' using Django 2.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
from django.utils.translation import gettext_lazy as _ # This is needed to gather the strings of languages available on the site

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'bre=h5g+29%aw6&cpwbn9b75&ei&-=h_*c3778rcd9j%avnp-g' # TODO extract to environment variable

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True # TODO extract to environment variable

### use domain name not IP address for security
ALLOWED_HOSTS = ['localhost','127.0.0.1', '0.0.0.0','dev.medborgarforskning.se', 'arcstest.brierjon.com']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth', # also required by AllAuth
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages', # also required by AllAuth
    'django.contrib.staticfiles',
    'django.contrib.sitemaps', # enables django to generate sitemap

### ArcsCore apps
    'blog', # enables the blog app of ArcsCore
    'products', # enables the products app of ArcsCore
    'projects', # enables the projects app of ArcsCore

### Custom user apps
    'users', # initializes CustomUser and users app a.k.a. "People app" of ArcsCore

### Third party apps
    'django_summernote', # Installing summernote (CK)
    'taggit', # for handling tags/keywords (CK)

### AllAuth for social authentications start #
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.orcid',
### AllAuth for social authentications end #

### Wagtail app requirement start #
    'wagtail.contrib.forms',
    'wagtail.contrib.redirects',
    'wagtail.embeds',
    'wagtail.sites',
    'wagtail.users',
    'wagtail.snippets',
    'wagtail.documents',
    'wagtail.images',
    'wagtail.search',
    'wagtail.admin',
    'wagtail.core',

    'modelcluster',
    #'taggit', # I disabled this because we have it above (CK)
    'wagtail.contrib.modeladmin', # for wagtail menus
    'wagtailmenus', # initialize wagtail menus
### Wagtail app requirement end #
### Wagtail forms install #
    #'wagtail.wagtailforms',
### Wagtail forms install end #
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware', # local must be placed before CommonMiddleware as it needs an activated language. CacheMiddleware if used should be before Locale - https://docs.djangoproject.com/en/2.2/topics/i18n/translation/#how-django-discovers-language-preference
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ### Wagtail app requirement start #
    'wagtail.core.middleware.SiteMiddleware',
    'wagtail.contrib.redirects.middleware.RedirectMiddleware',
    ### Wagtail app requirement end #
]

ROOT_URLCONF = 'arcs_project.urls'

# More on Template Configuration https://docs.djangoproject.com/en/2.2/topics/templates/
# This configuration currently has a common templates directory being referred to outside the app directory for the templates.
# Templates will also be looked for in each app's directory
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates/')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request', # `allauth` needs this from django
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz', # adds TIME_ZONE variable to RequestContext
                'wagtailmenus.context_processors.wagtailmenus',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)

# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    'orcid': {
        # Base domain of the API. Default value: 'orcid.org', for the production API
        'BASE_DOMAIN':'orcid.org',  # sandbox.orcid.org for the sandbox API
        # Member API or Public API? Default: False (for the public API)
        'MEMBER_API': True,  # for the member API
        'APP': {
            'client_id': 'APP-04ZPI85NJK4Z97OR', # TODO extract to secrets file variable for setup config - this is dev testing only will stop working
            'secret': '9a9e5e9c-414c-4833-b44c-a13c1dbb00e3',
            'key': ''
        }
    }
}

WSGI_APPLICATION = 'arcs_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# TODO replace sqlite3 with postgresql
#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.postgresql_psycopg2',
#        'NAME': 'myproject',
#        'USER': 'myprojectuser',
#        'PASSWORD': 'password',
#        'HOST': 'localhost',
#        'PORT': '',
#    }
#}
DATABASES = { # TODO switch to postgres
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

#if ENVIRONMENT == 'production':
#    SECURE_BROWSER_XSS_FILTER = UserAttributeSimilarityValidator
#    X_FRAME_OPTIONS = 'DENY'
#    SECURE_SSL_REDIRECT = True
#    SECURE_HSTS_SECONDS = 31536000
#    SECURE_HSTS_INCLUDE_SUBDOMAIN = True
#    SECURE_HSTS_PRELOAD = False # TODO seto to true
#    SECURE_CONTENT_TYPE_NOSNIFF = True
#    SESSION_COOKIE_SECURE = True
#    CSRF_COOKIE_SECURE = True


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us' # Default language used if no translation is available - ie language found in the templates

# For organization and resadability order alphabetically according to two letter language code
LANGUAGES = [
    ('en', _('English')), # The sublanguages like en-us can also be stated to differentiate translations
    ('sv', _('Swedish')),
]

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/var/www/arcs_collected_static/static/' # set the location where collectstatic command will place the collected files for serving
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # sets where collectstatic command will look for static files to include in collection


# Media files (Users uploaded)
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'


# Set the paths to find the local string files used in translation of the site templates - https://docs.djangoproject.com/en/2.2/ref/settings/#locale-paths
# In order of precidence - for robustness and review add the locale path
# 1. LOCALE_PATHS
# 2. locale directory of an app
# 3. django/conf/locale directory as a fallback
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]



# Set Wagtail Site Name
WAGTAIL_SITE_NAME = 'Pages and Blog of ARCS'

# Enable our CustomUser abstract user for futurproofing and custom auth uses
AUTH_USER_MODEL = 'users.CustomUser'
