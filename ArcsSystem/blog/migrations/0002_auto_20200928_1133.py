# Generated by Django 2.2.16 on 2020-09-28 11:33

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields


class Migration(migrations.Migration):

    dependencies = [
        ('wagtailcore', '0046_auto_20200928_1133'),
        ('taggit', '0003_taggeditem_add_unique_index'),
        ('blog', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('blogAuthor', models.CharField(max_length=255)),
                ('authorEmail', models.EmailField(max_length=254)),
                ('publishedDate', models.DateField(verbose_name='Post date')),
                ('body', wagtail.core.fields.StreamField([('title', wagtail.core.blocks.CharBlock(classname='full title')), ('content', wagtail.core.blocks.RichTextBlock())])),
                ('body_en', wagtail.core.fields.StreamField([('title', wagtail.core.blocks.CharBlock(classname='full title')), ('content', wagtail.core.blocks.RichTextBlock())], null=True)),
                ('body_sv', wagtail.core.fields.StreamField([('title', wagtail.core.blocks.CharBlock(classname='full title')), ('content', wagtail.core.blocks.RichTextBlock())], null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogPageTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='blog.BlogPage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_blogpagetag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='blogpage',
            name='blogTags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='blog.BlogPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
