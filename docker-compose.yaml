#
# File Name: docker-compose.yaml
# Description: Configuration to build each docker container for a component of the ARCSystem.
# Author: Jonathan Brier & Christopher Kullenberg
#

# TODO update to use Ansible configuration
# Using Compose File reference version 2.2 due to docker version installed https://docs.docker.com/compose/compose-file/compose-file-v2/

version: "2.2" # version of docker-config standard not the file version


services:
  db:
    image: postgres:12.1
    container_name: ARCS-PG-DB
    restart: always
    #build: ./postgresdb # TODO finish postgres config for ssl if keeping tcp/ip connection type - not needed if socket, but tcp is needed for swarm
    environment: # https://www.postgresql.org/docs/12/libpq-envars.html
      # TODO set db to use socket rather than ip network
      # TODO move sensative info to environment file
      #- postgres-variables.env # See: https://docs.docker.com/compose/environment-variables/
      - POSTGRES_DB=pg-docker
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=docker
    volumes:
      - pgdatabase_volume:/var/lib/postgresql/data # Docker controlled volume persistant after container being removed
    ports:
      - 5432:5432
    networks:
      - db_network
    healthcheck:
      test: "exit 0"

  djangoapp:
    container_name: ARCSCore
    restart: always
    build: ./ArcsSystem
    depends_on:
      db:
        condition: service_healthy
    volumes:
      #- .:/opt/arcs_project_code #allow  editing code on host to reflect copy on server
      - static_volume:/var/www/arcs_collected_static/static # Docker controlled volume persistant after container being removed and shared with nginx
      - media_volume:/opt/arcs_project_code/arcs_project/media # Docker controlled volume persistant after container being removed and shared with nginx
    ports:
      - 8000:8000
    command: ["gunicorn", "-c", "gunicorn.conf.py", "--bind", ":8000", "--chdir", "/opt/arcs_project_code", "arcs_project.wsgi:application"]
    networks:
      db_network:
        aliases:
          - db-network
      nginx_network:
        aliases:
          - djangoapp-app
    healthcheck:
      test: "exit 0"

  nginximg:
    image: nginx:latest
    container_name: ARCServer
    restart: always
    build: ./nginx
    depends_on: # TODO reenable for production
      djangoapp:
        condition: service_healthy
    ports:
      - 80:80
      - 443:443
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    volumes:
      - static_volume:/var/www/arcs_collected_static/static
      - media_volume:/var/www/arcs_collected_static/media # TODO review if media should be controlled by the django app for permissions
      - ./data/certbot/conf:/etc/letsencrypt # links to where the certificates are... TODO
      - ./data/certbot/www:/var/www/certbot # links to where the certificates are... TODO
    networks:
      - nginx_network
    #healthcheck:
    #  test: "exit 0"

  letsencrypt:
      image: certbot/certbot
      container_name: LetsEncrypt
      restart: unless-stopped
      volumes:
        - ./data/certbot/conf:/etc/letsencrypt
        - ./data/certbot/www:/var/www/certbot
      entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
# TODO verify secure file permissions of volumes

networks:
  nginx_network:
    driver: bridge
  db_network:
    driver: bridge

volumes:
  pgdatabase_volume:
  static_volume:
  media_volume:
