#
# File Name: docker-compose.yaml
# Description: Configuration to build each docker container for a component of the ARCSystem.
# Author: Jonathan Brier & Christopher Kullenberg
#

# TODO update to use Ansible configuration
# Using Compose File reference version 2.2 due to docker version installed https://docs.docker.com/compose/compose-file/compose-file-v2/

version: "2.2" # version of docker-config standard not the file version


services:
  db:
    image: postgres:12.1
    container_name: ARCS-PG-DB
    restart: always
    environment:
      # TODO set db to use socket rather than ip network
      # TODO move sensative info to environment file
      - POSTGRES_DB=pg-docker
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=docker
    volumes:
      - ./postgresdb:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - db_network
    healthcheck:
      test: "exit 0"

  djangoapp:
    container_name: ARCSCore
    restart: always
    build: .
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./arcsApp:/arcsApp/
    ports:
      - 8000:8000
        #    command: uwsgi --http-socket :8000 --wsgi-file manage.py --uid 100 --gid 100 # THIS WORKS! but not secure or using nginx
    command: python manage.py runserver 0.0.0.0:8000
    # python manage.py runserver 0.0.0.0:8000 # This is the stated way to work, but is getting gateway connection refused
#      CMD ["gunicorn", "--chdir", "hello", "--bind", ":8000", "hello.wsgi:application"]
    networks:
      - nginx_network
      - db_network

  nginximg:
    image: nginx:latest
    container_name: ARCServer
    restart: always
    depends_on:
      - djangoapp
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf #copy local nginx.conf file from /opt directory relative to execution
      - ./arcsApp/static/:/var/www/arcsApp/static
#      - ./uwsgi_params:/var/
    networks:
      - nginx_network



networks:
  nginx_network:
    driver: bridge
  db_network:
    driver: bridge

#      - '/var/run/docker.sock:/tmp/docker.sock:ro'
#      - './data:/usr/local/share/data'
#      ArcsCore:
#        build: .
#        command:
#          python3 manage.py runserver 0.0.0.0:8000
#          volumes:
#         - './ARCSystem:/usr/src/app/ARCSystem'
#        - './media:/usr/src/app/media'
#        - './static:/usr/src/app/static'
#        - './templates:/usr/src/app/templates'
#        - './apps/external:/usr/src/app/external'
#        - './apps/myapp1:/usr/src/app/myapp1'
#        - './apps/myapp2:/usr/src/app/myapp2'
#          ports:
#            - '8000'
#        environment:
#         - 'SITE_HOST'
#         - 'MEDIA_HOST'
#         - 'STATIC_HOST'
#         - 'VIRTUAL_HOST=${SITE_HOST}'
#         - 'VIRTUAL_PORT=8000'
#         - 'MYSQL_HOST=db'
#         - 'MYSQL_USER'
#         - 'MYSQL_PASSWORD'
#         - 'MYSQL_DATABASE'
#      media:
